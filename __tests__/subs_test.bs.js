// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var App$BgTestParcel = require("../src/app.bs.js");

function dispatch(param) {
  return /* () */0;
}

Jest.describe("patch sets", (function (param) {
        Jest.test("single sub", (function (param) {
                var sub_set_count = /* record */[/* contents */0];
                var test_sub = function (key, param) {
                  var sub_effect = function (_dispatch) {
                    sub_set_count[0] = sub_set_count[0] + 1 | 0;
                    return (function (param) {
                        return /* () */0;
                      });
                  };
                  return App$BgTestParcel.Sub[/* start */1](key, sub_effect);
                };
                App$BgTestParcel.Sub[/* patch */3](/* [] */0, /* :: */[
                      test_sub("test-sub", /* () */0),
                      /* [] */0
                    ], /* [] */0, dispatch);
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](sub_set_count[0]));
              }));
        Jest.test("multiple subs", (function (param) {
                var sub_set_count = /* record */[/* contents */0];
                var test_sub = function (key, param) {
                  var sub_effect = function (_dispatch) {
                    sub_set_count[0] = sub_set_count[0] + 1 | 0;
                    return (function (param) {
                        return /* () */0;
                      });
                  };
                  return App$BgTestParcel.Sub[/* start */1](key, sub_effect);
                };
                var subs_000 = test_sub("test-sub-1", /* () */0);
                var subs_001 = /* :: */[
                  test_sub("test-sub-2", /* () */0),
                  /* :: */[
                    test_sub("test-sub-3", /* () */0),
                    /* :: */[
                      test_sub("test-sub-4", /* () */0),
                      /* [] */0
                    ]
                  ]
                ];
                var subs = /* :: */[
                  subs_000,
                  subs_001
                ];
                App$BgTestParcel.Sub[/* patch */3](/* [] */0, subs, /* [] */0, dispatch);
                return Jest.Expect[/* toBe */2](4, Jest.Expect[/* expect */0](sub_set_count[0]));
              }));
        return Jest.test("a sub from none", (function (param) {
                      var sub_set_count = /* record */[/* contents */0];
                      var test_sub = function (key, param) {
                        var sub_effect = function (_dispatch) {
                          sub_set_count[0] = sub_set_count[0] + 1 | 0;
                          return (function (param) {
                              return /* () */0;
                            });
                        };
                        return App$BgTestParcel.Sub[/* start */1](key, sub_effect);
                      };
                      var old_subs_000 = App$BgTestParcel.Sub[/* none */0];
                      var old_subs = /* :: */[
                        old_subs_000,
                        /* [] */0
                      ];
                      var subs_000 = test_sub("test-sub", /* () */0);
                      var subs = /* :: */[
                        subs_000,
                        /* [] */0
                      ];
                      App$BgTestParcel.Sub[/* patch */3](old_subs, subs, /* [] */0, dispatch);
                      return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](sub_set_count[0]));
                    }));
      }));

Jest.describe("patch unsets", (function (param) {
        Jest.test("single sub", (function (param) {
                var sub_unset_count = /* record */[/* contents */0];
                var test_sub = function (key, param) {
                  var sub_effect = function (_dispatch, param) {
                    sub_unset_count[0] = sub_unset_count[0] + 1 | 0;
                    return /* () */0;
                  };
                  return App$BgTestParcel.Sub[/* start */1](key, sub_effect);
                };
                var old_subs_000 = test_sub("test-sub", /* () */0);
                var old_subs = /* :: */[
                  old_subs_000,
                  /* [] */0
                ];
                var subs_000 = App$BgTestParcel.Sub[/* none */0];
                var subs = /* :: */[
                  subs_000,
                  /* [] */0
                ];
                var patched_subs = App$BgTestParcel.Sub[/* patch */3](/* [] */0, old_subs, /* [] */0, dispatch);
                App$BgTestParcel.Sub[/* patch */3](patched_subs, subs, /* [] */0, dispatch);
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](sub_unset_count[0]));
              }));
        return Jest.test("multiple subs", (function (param) {
                      var sub_unset_count = /* record */[/* contents */0];
                      var test_sub = function (key, param) {
                        var sub_effect = function (_dispatch, param) {
                          sub_unset_count[0] = sub_unset_count[0] + 1 | 0;
                          return /* () */0;
                        };
                        return App$BgTestParcel.Sub[/* start */1](key, sub_effect);
                      };
                      var old_subs_000 = test_sub("test-sub-1", /* () */0);
                      var old_subs_001 = /* :: */[
                        test_sub("test-sub-2", /* () */0),
                        /* [] */0
                      ];
                      var old_subs = /* :: */[
                        old_subs_000,
                        old_subs_001
                      ];
                      var subs_000 = App$BgTestParcel.Sub[/* none */0];
                      var subs_001 = /* :: */[
                        App$BgTestParcel.Sub[/* none */0],
                        /* [] */0
                      ];
                      var subs = /* :: */[
                        subs_000,
                        subs_001
                      ];
                      var patched_subs = App$BgTestParcel.Sub[/* patch */3](/* [] */0, old_subs, /* [] */0, dispatch);
                      App$BgTestParcel.Sub[/* patch */3](patched_subs, subs, /* [] */0, dispatch);
                      return Jest.Expect[/* toBe */2](2, Jest.Expect[/* expect */0](sub_unset_count[0]));
                    }));
      }));

Jest.describe("patch restarts on key change for", (function (param) {
        Jest.test("single sub", (function (param) {
                var sub_set_count = /* record */[/* contents */0];
                var sub_unset_count = /* record */[/* contents */0];
                var test_sub = function (key, param) {
                  var sub_effect = function (_dispatch) {
                    sub_set_count[0] = sub_set_count[0] + 1 | 0;
                    return (function (param) {
                        sub_unset_count[0] = sub_unset_count[0] + 1 | 0;
                        return /* () */0;
                      });
                  };
                  return App$BgTestParcel.Sub[/* start */1](key, sub_effect);
                };
                var old_subs_000 = test_sub("test-sub-1", /* () */0);
                var old_subs = /* :: */[
                  old_subs_000,
                  /* [] */0
                ];
                var subs_000 = test_sub("test-sub-1-new", /* () */0);
                var subs = /* :: */[
                  subs_000,
                  /* [] */0
                ];
                var patched_subs = App$BgTestParcel.Sub[/* patch */3](/* [] */0, old_subs, /* [] */0, dispatch);
                App$BgTestParcel.Sub[/* patch */3](patched_subs, subs, /* [] */0, dispatch);
                return Jest.Expect[/* toEqual */12](/* :: */[
                            2,
                            /* :: */[
                              1,
                              /* [] */0
                            ]
                          ], Jest.Expect[/* expect */0](/* :: */[
                                sub_set_count[0],
                                /* :: */[
                                  sub_unset_count[0],
                                  /* [] */0
                                ]
                              ]));
              }));
        return Jest.test("multiple subs", (function (param) {
                      var sub_set_count = /* record */[/* contents */0];
                      var sub_unset_count = /* record */[/* contents */0];
                      var test_sub = function (key, param) {
                        var sub_effect = function (_dispatch) {
                          sub_set_count[0] = sub_set_count[0] + 1 | 0;
                          return (function (param) {
                              sub_unset_count[0] = sub_unset_count[0] + 1 | 0;
                              return /* () */0;
                            });
                        };
                        return App$BgTestParcel.Sub[/* start */1](key, sub_effect);
                      };
                      var old_subs_000 = test_sub("test-sub-1", /* () */0);
                      var old_subs_001 = /* :: */[
                        test_sub("test-sub-2", /* () */0),
                        /* :: */[
                          test_sub("test-sub-3", /* () */0),
                          /* [] */0
                        ]
                      ];
                      var old_subs = /* :: */[
                        old_subs_000,
                        old_subs_001
                      ];
                      var subs_000 = test_sub("test-sub-1-new", /* () */0);
                      var subs_001 = /* :: */[
                        test_sub("test-sub-2-new", /* () */0),
                        /* :: */[
                          test_sub("test-sub-3", /* () */0),
                          /* [] */0
                        ]
                      ];
                      var subs = /* :: */[
                        subs_000,
                        subs_001
                      ];
                      var patched_subs = App$BgTestParcel.Sub[/* patch */3](/* [] */0, old_subs, /* [] */0, dispatch);
                      App$BgTestParcel.Sub[/* patch */3](patched_subs, subs, /* [] */0, dispatch);
                      return Jest.Expect[/* toEqual */12](/* :: */[
                                  5,
                                  /* :: */[
                                    2,
                                    /* [] */0
                                  ]
                                ], Jest.Expect[/* expect */0](/* :: */[
                                      sub_set_count[0],
                                      /* :: */[
                                        sub_unset_count[0],
                                        /* [] */0
                                      ]
                                    ]));
                    }));
      }));

exports.dispatch = dispatch;
/*  Not a pure module */
