// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var JestDom = require("bs-jest-dom/src/JestDom.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var App$BgTestParcel = require("../src/app.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function unwrap(param) {
  if (param !== undefined) {
    return Caml_option.valFromOption(param);
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "Element not found"
        ];
  }
}

function app_node(param) {
  var container = document.createElement("div");
  container.setAttribute("id", "app");
  return container;
}

function find_el(selector, container) {
  return unwrap(Caml_option.nullable_to_opt(container.querySelector(selector)));
}

function click_el(selector, container) {
  find_el(selector, container).click();
  return /* () */0;
}

Jest.describe("app", (function (param) {
        return Jest.test("creates functional application", (function (param) {
                      var node = app_node(/* () */0);
                      var init = function (param) {
                        return 0;
                      };
                      var update = function (state, param) {
                        return /* tuple */[
                                state + 1 | 0,
                                App$BgTestParcel.Fx[/* none */0]
                              ];
                      };
                      var view = function (state) {
                        return App$BgTestParcel.vnode(undefined, "div", /* [] */0, /* :: */[
                                    App$BgTestParcel.vnode(undefined, "h1", /* :: */[
                                          /* Attr */Block.__(0, [/* tuple */[
                                                "id",
                                                "count"
                                              ]]),
                                          /* [] */0
                                        ], /* :: */[
                                          App$BgTestParcel.text(undefined, "Count: " + String(state)),
                                          /* [] */0
                                        ]),
                                    /* :: */[
                                      App$BgTestParcel.vnode(undefined, "button", /* :: */[
                                            /* Attr */Block.__(0, [/* tuple */[
                                                  "id",
                                                  "increment"
                                                ]]),
                                            /* :: */[
                                              /* Handler */Block.__(1, [/* tuple */[
                                                    "click",
                                                    /* Increment */0
                                                  ]]),
                                              /* [] */0
                                            ]
                                          ], /* :: */[
                                            App$BgTestParcel.text(undefined, "+"),
                                            /* [] */0
                                          ]),
                                      /* [] */0
                                    ]
                                  ]);
                      };
                      var subscriptions = function (param) {
                        return /* [] */0;
                      };
                      App$BgTestParcel.app(/* record */[
                            /* init */init,
                            /* update */update,
                            /* view */view,
                            /* subscriptions */subscriptions,
                            /* node */node
                          ]);
                      click_el("#increment", node);
                      click_el("#increment", node);
                      return (function (eta) {
                                  return JestDom.toHaveTextContent("Count: 2", undefined, eta);
                                })(Jest.Expect[/* expect */0](find_el("#count", node)));
                    }));
      }));

exports.unwrap = unwrap;
exports.app_node = app_node;
exports.find_el = find_el;
exports.click_el = click_el;
/*  Not a pure module */
