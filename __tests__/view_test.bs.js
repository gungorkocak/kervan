// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var JestDom = require("bs-jest-dom/src/JestDom.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var App$BgTestParcel = require("../src/app.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function unwrap(param) {
  if (param !== undefined) {
    return Caml_option.valFromOption(param);
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "Element not found"
        ];
  }
}

function evt_handler(param, param$1) {
  return /* () */0;
}

Jest.test("render text", (function (param) {
        var container = document.createElement("div");
        var vdom = App$BgTestParcel.text(undefined, "hello");
        App$BgTestParcel.View[/* render */28](vdom, evt_handler, container);
        return (function (eta) {
                    return JestDom.toHaveTextContent("hello", undefined, eta);
                  })(Jest.Expect[/* expect */0](container));
      }));

Jest.test("render element", (function (param) {
        var container = document.createElement("div");
        container.setAttribute("id", "app");
        var vdom = App$BgTestParcel.vnode(undefined, "div", /* [] */0, /* [] */0);
        App$BgTestParcel.View[/* render */28](vdom, evt_handler, container);
        return JestDom.toContainHTML("<div></div>", Jest.Expect[/* expect */0](container));
      }));

Jest.test("render element with prop", (function (param) {
        var container = document.createElement("div");
        container.setAttribute("id", "app");
        var vdom = App$BgTestParcel.vnode(undefined, "div", /* :: */[
              /* Attr */Block.__(0, [/* tuple */[
                    "id",
                    "my-id"
                  ]]),
              /* [] */0
            ], /* [] */0);
        App$BgTestParcel.View[/* render */28](vdom, evt_handler, container);
        return JestDom.toContainHTML("<div id=\"my-id\"></div>", Jest.Expect[/* expect */0](container));
      }));

Jest.test("render nested element", (function (param) {
        var container = document.createElement("div");
        container.setAttribute("id", "app");
        var vdom = App$BgTestParcel.vnode(undefined, "div", /* :: */[
              /* Attr */Block.__(0, [/* tuple */[
                    "id",
                    "parent"
                  ]]),
              /* [] */0
            ], /* :: */[
              App$BgTestParcel.vnode(undefined, "div", /* :: */[
                    /* Attr */Block.__(0, [/* tuple */[
                          "id",
                          "child"
                        ]]),
                    /* [] */0
                  ], /* [] */0),
              /* [] */0
            ]);
        App$BgTestParcel.View[/* render */28](vdom, evt_handler, container);
        return JestDom.toContainHTML("<div id=\"parent\"><div id=\"child\"></div></div>", Jest.Expect[/* expect */0](container));
      }));

Jest.test("render nested multiple layers of elements", (function (param) {
        var container = document.createElement("div");
        container.setAttribute("id", "app");
        var vdom = App$BgTestParcel.vnode(undefined, "div", /* :: */[
              /* Attr */Block.__(0, [/* tuple */[
                    "id",
                    "parent"
                  ]]),
              /* [] */0
            ], /* :: */[
              App$BgTestParcel.vnode(undefined, "div", /* :: */[
                    /* Attr */Block.__(0, [/* tuple */[
                          "id",
                          "child1"
                        ]]),
                    /* [] */0
                  ], /* [] */0),
              /* :: */[
                App$BgTestParcel.vnode(undefined, "div", /* :: */[
                      /* Attr */Block.__(0, [/* tuple */[
                            "id",
                            "child2"
                          ]]),
                      /* [] */0
                    ], /* :: */[
                      App$BgTestParcel.vnode(undefined, "span", /* :: */[
                            /* Attr */Block.__(0, [/* tuple */[
                                  "id",
                                  "grandchild1"
                                ]]),
                            /* [] */0
                          ], /* [] */0),
                      /* :: */[
                        App$BgTestParcel.vnode(undefined, "a", /* :: */[
                              /* Attr */Block.__(0, [/* tuple */[
                                    "id",
                                    "grandchild2"
                                  ]]),
                              /* :: */[
                                /* Attr */Block.__(0, [/* tuple */[
                                      "href",
                                      "http://caravan.org"
                                    ]]),
                                /* [] */0
                              ]
                            ], /* [] */0),
                        /* [] */0
                      ]
                    ]),
                /* [] */0
              ]
            ]);
        App$BgTestParcel.View[/* render */28](vdom, evt_handler, container);
        return JestDom.toContainHTML("<div id=\"parent\"><div id=\"child1\"></div><div id=\"child2\"><span id=\"grandchild1\"></span><a id=\"grandchild2\" href=\"http://caravan.org\"></a></div></div>", Jest.Expect[/* expect */0](container));
      }));

exports.unwrap = unwrap;
exports.evt_handler = evt_handler;
/*  Not a pure module */
