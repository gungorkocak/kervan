// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Superfine1 = require("./superfine1");

function one(fn) {
  return /* FxOne */[fn];
}

function run(fx, dispatch) {
  if (fx) {
    return Curry._1(fx[0], dispatch);
  } else {
    return /* () */0;
  }
}

var Fx = /* module */[
  /* none : FxNone */0,
  /* one */one,
  /* run */run
];

function start(key, start_fn) {
  return /* SubStart */Block.__(0, [
            key,
            start_fn
          ]);
}

function call(dispatch, old_sub, sub) {
  if (typeof old_sub === "number") {
    if (typeof sub === "number" || sub.tag) {
      return /* SubNone */0;
    } else {
      return /* SubStop */Block.__(1, [
                sub[0],
                Curry._1(sub[1], dispatch)
              ]);
    }
  } else if (old_sub.tag) {
    var stop_fn = old_sub[1];
    var key = old_sub[0];
    if (typeof sub === "number") {
      Curry._1(stop_fn, /* () */0);
      return /* SubNone */0;
    } else if (sub.tag) {
      return /* SubStop */Block.__(1, [
                key,
                stop_fn
              ]);
    } else {
      var key$1 = sub[0];
      if (key === key$1) {
        return /* SubStop */Block.__(1, [
                  key,
                  stop_fn
                ]);
      } else {
        Curry._1(stop_fn, /* () */0);
        return /* SubStop */Block.__(1, [
                  key$1,
                  Curry._1(sub[1], dispatch)
                ]);
      }
    }
  } else {
    return /* SubNone */0;
  }
}

function patch(_old_subs, _subs, _next_subs, dispatch) {
  while(true) {
    var next_subs = _next_subs;
    var subs = _subs;
    var old_subs = _old_subs;
    if (old_subs) {
      var old_subs$1 = old_subs[1];
      var old_sub = old_subs[0];
      if (subs) {
        var next_sub = call(dispatch, old_sub, subs[0]);
        _next_subs = /* :: */[
          next_sub,
          next_subs
        ];
        _subs = subs[1];
        _old_subs = old_subs$1;
        continue ;
      } else {
        call(dispatch, old_sub, /* SubNone */0);
        _old_subs = old_subs$1;
        continue ;
      }
    } else if (subs) {
      var next_sub$1 = call(dispatch, /* SubNone */0, subs[0]);
      _next_subs = /* :: */[
        next_sub$1,
        next_subs
      ];
      _subs = subs[1];
      _old_subs = /* [] */0;
      continue ;
    } else {
      return List.rev(next_subs);
    }
  };
}

var Sub = /* module */[
  /* none : SubNone */0,
  /* start */start,
  /* call */call,
  /* patch */patch
];

function h(prim, prim$1, prim$2) {
  return Superfine1.h(prim, prim$1, prim$2);
}

function patch$1(prim, prim$1, prim$2) {
  Superfine1.patch(prim, prim$1, prim$2);
  return /* () */0;
}

function hh(tag, props, children) {
  return Superfine1.h(tag, $$Array.of_list(props), $$Array.of_list(children));
}

function app(param) {
  var node = param[/* node */4];
  var subscriptions = param[/* subscriptions */3];
  var view = param[/* view */2];
  var update = param[/* update */1];
  var init = param[/* init */0];
  var state = /* record */[/* contents */Curry._1(init, /* () */0)];
  var subs = /* record */[/* contents : [] */0];
  var dispatch_fn = /* record */[/* contents */(function (param) {
        return /* () */0;
      })];
  var event_handler = function (msg) {
    return (function (param) {
        return Curry._1(dispatch_fn[0], msg);
      });
  };
  var dispatch = function (msg) {
    return Curry._1(dispatch_fn[0], msg);
  };
  var set_state = function (next_state) {
    state[0] = next_state;
    subs[0] = patch(subs[0], Curry._1(subscriptions, state[0]), /* [] */0, dispatch);
    var state$1 = state[0];
    var event_handler$1 = event_handler;
    patch$1(node, Curry._1(view, state$1), event_handler$1);
    return /* () */0;
  };
  dispatch_fn[0] = (function (msg) {
      var match = Curry._2(update, state[0], msg);
      run(match[1], dispatch);
      return set_state(match[0]);
    });
  return set_state(Curry._1(init, /* () */0));
}

exports.Fx = Fx;
exports.Sub = Sub;
exports.h = h;
exports.patch = patch$1;
exports.hh = hh;
exports.app = app;
/* ./superfine1 Not a pure module */
