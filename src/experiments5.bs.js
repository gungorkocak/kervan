// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Hyperapp_hacked = require("./hyperapp_hacked");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function one(effect) {
  return /* One */[effect];
}

var Cmd = /* module */[
  /* none : NoCmd */0,
  /* one */one
];

function log(str) {
  console.log(str);
  return /* () */0;
}

function delay(param, dispatch) {
  setTimeout(Curry._1(dispatch, param[1]), param[0]);
  return /* () */0;
}

var EffectTest = /* module */[
  /* log */log,
  /* delay */delay
];

function every(dispatch, param) {
  var id = setInterval(Curry._1(dispatch, param[1]), param[0]);
  return (function (param) {
      clearInterval(id);
      return /* () */0;
    });
}

var SubTest = /* module */[/* every */every];

function h(prim, prim$1, prim$2) {
  return Hyperapp_hacked.h(prim, prim$1, prim$2);
}

function app(prim) {
  Hyperapp_hacked.app(prim);
  return /* () */0;
}

function subscriptions(_state) {
  return /* array */[/* Every */[
            every,
            /* tuple */[
              1000,
              /* Increment */0
            ]
          ]];
}

function update(state, param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return /* tuple */[
                  state + 1 | 0,
                  /* NoFx */0
                ];
      case 1 : 
          return /* tuple */[
                  state - 1 | 0,
                  /* NoFx */0
                ];
      case 2 : 
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "experiments5.ml",
                  91,
                  19
                ]
              ];
      
    }
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return /* tuple */[
                  param[0],
                  /* NoFx */0
                ];
      case 1 : 
          return /* tuple */[
                  Caml_int32.imul(state, param[0]),
                  /* Delay */Block.__(0, [
                      delay,
                      /* tuple */[
                        1000,
                        /* Set */Block.__(0, [42])
                      ]
                    ])
                ];
      case 2 : 
          return /* tuple */[
                  state,
                  /* Log */Block.__(1, [
                      log,
                      param[0]
                    ])
                ];
      
    }
  }
}

function hh(tag, props, children) {
  return Hyperapp_hacked.h(tag, $$Array.of_list(props), $$Array.of_list(children));
}

function view(state) {
  return hh("div", /* :: */[
              /* Attr */Block.__(0, [/* tuple */[
                    "id",
                    "garip"
                  ]]),
              /* [] */0
            ], /* :: */[
              hh("div", /* :: */[
                    /* Attr */Block.__(0, [/* tuple */[
                          "id",
                          "bibaskagarip"
                        ]]),
                    /* [] */0
                  ], /* :: */[
                    /* Text */[String(state)],
                    /* [] */0
                  ]),
              /* :: */[
                hh("button", /* :: */[
                      /* Handler */Block.__(1, [/* tuple */[
                            "onclick",
                            /* Increment */0
                          ]]),
                      /* [] */0
                    ], /* :: */[
                      /* Text */["+"],
                      /* [] */0
                    ]),
                /* :: */[
                  hh("button", /* :: */[
                        /* Handler */Block.__(1, [/* tuple */[
                              "onclick",
                              /* Log */Block.__(2, [String(state)])
                            ]]),
                        /* [] */0
                      ], /* :: */[
                        /* Text */["Log"],
                        /* [] */0
                      ]),
                  /* :: */[
                    hh("button", /* :: */[
                          /* Attr */Block.__(0, [/* tuple */[
                                "id",
                                "gulizar"
                              ]]),
                          /* :: */[
                            /* Handler */Block.__(1, [/* tuple */[
                                  "onmouseover",
                                  /* Decrement */1
                                ]]),
                            /* :: */[
                              /* Handler */Block.__(1, [/* tuple */[
                                    "onclick",
                                    /* Decrement */1
                                  ]]),
                              /* [] */0
                            ]
                          ]
                        ], /* :: */[
                          /* Text */["-"],
                          /* [] */0
                        ]),
                    /* :: */[
                      hh("button", /* :: */[
                            /* Handler */Block.__(1, [/* tuple */[
                                  "onclick",
                                  /* Set */Block.__(0, [24])
                                ]]),
                            /* [] */0
                          ], /* :: */[
                            /* Text */["Set to 42"],
                            /* [] */0
                          ]),
                      /* :: */[
                        hh("button", /* :: */[
                              /* Handler */Block.__(1, [/* tuple */[
                                    "onclick",
                                    /* Mult */Block.__(1, [2])
                                  ]]),
                              /* [] */0
                            ], /* :: */[
                              /* Text */["mult * 2"],
                              /* [] */0
                            ]),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var prim = {
  init: 0,
  update: update,
  view: view,
  subscriptions: subscriptions,
  node: document.getElementById("app")
};

Hyperapp_hacked.app(prim);

var init = 0;

exports.Cmd = Cmd;
exports.EffectTest = EffectTest;
exports.SubTest = SubTest;
exports.h = h;
exports.app = app;
exports.init = init;
exports.subscriptions = subscriptions;
exports.update = update;
exports.hh = hh;
exports.view = view;
/* prim Not a pure module */
